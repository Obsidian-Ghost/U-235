package repositories

import (
	"U-235/models"
	"U-235/utils"
	"context"
	"database/sql"
	"errors"
	"fmt"
	"github.com/golang-jwt/jwt/v5"
	"github.com/google/uuid"
	"os"
	"time"
)

type UserRepository interface {
	UserRegistrationService(Name, email, passwordHashed string, ctx context.Context) (*models.User, error)
	UserLoginService(email, password string, ctx context.Context) (string, error)
}

type userRepo struct {
	db *sql.DB
}

func NewUserRepo(db *sql.DB) UserRepository {
	return &userRepo{
		db: db,
	}
}

func (u *userRepo) UserRegistrationService(name, email, passwordHashed string, ctx context.Context) (*models.User, error) {
	// Check if user already exists
	var existingUser models.User
	checkQuery := `SELECT id FROM users WHERE email = $1`
	err := u.db.QueryRowContext(ctx, checkQuery, email).Scan(&existingUser.Id)

	// If no error, user exists
	if err == nil {
		return nil, errors.New("user with this email already exists")
	}

	// If error is not "no rows", return the error
	if err != sql.ErrNoRows {
		return nil, fmt.Errorf("error checking existing user: %w", err)
	}

	// User doesn't exist, create new user
	// UUID will be auto-generated by the database
	var user models.User
	insertQuery := `INSERT INTO users (name, email, password) 
                    VALUES ($1, $2, $3) 
                    RETURNING id, name, email, created_at`

	err = u.db.QueryRowContext(
		ctx,
		insertQuery,
		name,
		email,
		passwordHashed,
	).Scan(&user.Id, &user.Name, &user.Email, &user.CreatedAt)

	if err != nil {
		return nil, fmt.Errorf("failed to create user: %w", err)
	}

	return &user, nil
}

func (u *userRepo) UserLoginService(email, password string, ctx context.Context) (string, error) {
	query := `SELECT id, password FROM users WHERE email = $1`
	var (
		userID       uuid.UUID
		hashedPasswd string
	)
	// Query the database for the user with the provided email
	err := u.db.QueryRowContext(ctx, query, email).Scan(&userID, &hashedPasswd)
	if err != nil {
		if err == sql.ErrNoRows {
			return "", errors.New("invalid email or password")
		}
		return "", fmt.Errorf("database error: %w", err)
	}
	// Compare the provided password with the hashed password from DB
	err = utils.VerifyPassword(hashedPasswd, password)
	if err != nil {
		return "", errors.New("invalid email or password")
	}
	claims := &models.JwtClaims{
		UserId: userID,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(72 * time.Hour)),
		},
	}
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	secret := os.Getenv("JWT_SECRET")
	encodedToken, err := token.SignedString([]byte(secret))
	if err != nil {
		return "", err
	}

	return encodedToken, nil
}
